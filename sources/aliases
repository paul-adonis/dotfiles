# ============ Aliases =============
DEFAULT_PYTHON_VERSION='3.9.0'

# ============ FILES =============
# alias notes='cd $NOT_PUBLIC/notes && vim .'
# alias notes='cd /Volumes/GoogleDrive/My\ Drive/notes && vim .'
alias notes='cd $HOME/Documents/notes && vim .'
alias dev='cd $HOME/dev'
alias crypto='cd $NOT_PUBLIC/crypto'
alias cryp='cd $NOT_PUBLIC/crypto'
alias dotz='vim $DOTS/zshrc'
alias dotv='vim $DOTS/vimrc'
alias dotal='vim $SOURCES/aliases'
alias dotdoc='vim $SOURCES/docurated_aliases'
alias cdot='cd ~/dotfiles'
alias ndot='cdot && nvim'
alias cdown='cd ~/Downloads'
alias soz='source ~/.zshrc'
alias cpwd="pwd | tr -d '\n' | pbcopy"

launch_todo() {
    # filepath=$NOT_PUBLIC/notes/todo/personal.taskpaper
    # filepath="/Volumes/GoogleDrive/My Drive/notes/todo.taskpaper"
    filepath="$HOME/Documents/notes/todo.taskpaper"
    if [ -n "$TMUX" ]; then
        tmux -u new-window -a -n todo "source $HOME/.zshrc && vim $filepath"
    else
        vim $filepath
    fi
}
alias todo='launch_todo'


# ============ UNIX =============
if which exa >/dev/null 2>&1; then
    alias ls='exa'
    exa_tree() {
        if [ $# -eq 0 ]; then
            exa --tree
        else
            exa --tree --level=$1
        fi
    }
    alias ltree='exa_tree'
    exa_tree_long() {
        if [ $# -eq 0 ]; then
            exa -l --tree
        else
            exa -l --tree --level=$1
        fi
    }
    alias lltree='exa_tree_long'
fi
# these are overwritten by ~/.oh-my-zsh/lib/directories.zsh
# alias l='ls -l'
# alias ll='ls -la'
alias c='clear'
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -iv'
alias rmdir='rmdir -v'
alias ln='ln -v'
alias grep='grep --colour=auto'
alias egrep='egrep --colour=auto'
#alias rcp='rsync -v --progress'
#alias rmv='rsync -v --progress --remove-source-files'
alias which='which -a'
alias rg_better='rg --follow --smart-case'
grep_filetype() {
    if [ $# -eq 2 ]; then
        rg_better -g "*.$2" $1
    else
        rg_better $1
    fi
}
alias g='grep_filetype'
grep_and_replace() { grep -rl "$1" . | LC_ALL=C xargs sed -i '' -e "s/$1/$2/g" }

psgrep() { ps aux | grep -v grep | fzf -0 -q $1 }
alias psg=psgrep

psgrep_kill() {
    local ps_id=`psgrep $1 | awk '{print $2}'`
    echo "killing process ${ps_id}"
    kill $ps_id
}
alias psgkill='psgrep_kill'
psgrep_kill9() { 
    local ps_id=`psgrep $1 | awk '{print $2}'`
    echo "killing process ${ps_id}"
    kill -9 $ps_id
}
alias psgkill9='psgrep_kill9'

## pass options to free ##
alias meminfo='free -m -l -t'

## get top process eating memory
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'

## get top process eating cpu ##
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'

## Get server cpu info ##
alias cpuinfo='lscpu'
alias top_cpu='top -F -R -o cpu'

wttr_weather() { curl "wttr.in/${1:-}" }
alias ww='wttr_weather'


# ============ VIM/MVIM/NEOVIM =============
launch_vim() {
    if [ -n "$TMUX" ]; then
        local curr_folder=${PWD##*/}
        tmux -u new-window -a -n $curr_folder "export TERM='xterm-256color' && vim $1"
    else
        vim $1
    fi
}
alias v='launch_vim'
alias m='mvim'
launch_nvim() {
    if [ -n "$TMUX" ]; then
        local curr_folder=${PWD##*/}
        tmux -u new-window -a -n $curr_folder "nvim $1"
    else
        nvim $1
    fi
}
alias n='launch_nvim'


# ============ PYTHON =============
alias py='python'
alias pv='pyenv virtualenv'
pv_local() {
    pv $DEFAULT_PYTHON_VERSION $1
    pyenv local $DEFAULT_PYTHON_VERSION/envs/$1
}
alias pvlocal='pv_local'


# ============ LaTeX =============
# remove unnecessary latex files in this dir
alias rmltx='latexmk -c'


# ============ GIT =============
alias gb='git branch -av'
alias gbl='git branch'

alias gcam='git commit -a -m'
alias gci='git commit'
git_checkout() {
    if [ "$#" -ne 1 ]; then
        local branch=$(git branch -av | fzf -0 | awk '{print $1}' | sed -e "s/^remotes\/origin\///")
        if [[ "$branch" == "" ]]; then
            return 1
        fi
        git checkout "$branch"
    else
        git checkout "$@"
    fi
}
alias gco='git_checkout'
alias gcom='git checkout master'
alias gcob='git checkout -b'

git_merge() {
    if [ "$GIT_BRANCH" != "master" ]; then
        echo "Not on master, exiting."
        return 0
    fi
    local branch=$(git branch | fzf -0 | awk '{print $1}')
    git pull
    git merge --no-ff "$branch"
    git push
}
alias gmerge='git_merge'
alias gmm='git merge master'

alias gpull='git pull'
alias gpush='git push'
alias gpp='git pull && git push'
git_push_origin() {
    git push origin ${1:-${GIT_BRANCH}}
}
alias gpo='git_push_origin'
alias gitrm='git reset --hard origin/master'
gcamp() {
    gcam $1
    gpp
}
# cd to git root dir
function cdg() {
    local topdir=$(git rev-parse --show-toplevel)
    if [[ $? -ne 0 ]]; then
        return 1
    fi
    cd "${topdir}/${1}"
}
git_clean_branches() {
    git checkout master
    git pull
    git branch --merged | egrep -v "(^\*|master)" | xargs git branch -d
}
git_undo_last_commit() {
    git reset --soft HEAD~1
}
alias git_reset_to_master='git reset --hard origin/master'


# ============ GITHUB =============
# alias giss='open https://github.com/issues/assigned'
alias grev='open https://github.com/pulls/review-requested'
# $1 = github org/user name
git_new_pr() {
    local repo=$(basename $(git rev-parse --show-toplevel))
    open https://github.com/$1/$repo/pull/new/$GIT_BRANCH
}
# $1 = github org/user name
git_new_issue() {
    local repo=$(basename `git rev-parse --show-toplevel`)
    open https://github.com/$1/$repo/issues/new
}


# ============ TMUX =============
alias tl='tmux -u ls'
tmux_attach() { tmux -u a -t ${1:-base} }
alias ta='tmux_attach'
tmux_new() { tmux -u new -A -s ${1:-base} }
alias tn='tmux_new'
tmux_wrapper() {
    if [ $# -eq 0 ]; then
        if [ -n "$TMUX" ]; then
            echo "SMOOTH BRO"
        else
            tn
        fi
    else
        tmux -u "$@"
    fi
}
alias t='tmux_wrapper'


# ============ BREW =============
alias bserv='brew services list'
alias bstart='brew services start'
alias bstop='brew services stop'


# ============ DOCKER =============
alias d='docker'
alias dcl='docker container ls'
alias dcla='docker container ls -a'
alias dps='docker ps --format "table {{.ID}}  {{.Image}}\t{{.Command}}\t{{.Status}}\t{{.Size}}\t{{.Names}}"'
docker_grep_all() {
    local info=`dcla | sed 1d | awk '{print $1, "\t", $2, "\t", $NF}'`
    if [ "$#" -ne 1 ]; then
        echo $info | fzf -0 | awk '{print $1}'
    else
        echo $info | fzf -0 -q $1 | awk '{print $1}'
    fi
}
alias dgrep="docker_grep_all"
docker_grep_running() {
    local info=`dcl | sed 1d | awk '{print $1, "\t", $2, "\t", $NF}'`
    if [ "$#" -ne 1 ]; then
        echo $info | fzf -0 | awk '{print $1}'
    else
        echo $info | fzf -0 -q $1 | awk '{print $1}'
    fi
}
alias dgrepr='docker_grep_running'
docker_start() {
    local c_id=`dgrep $1`
    docker container start $c_id
}
alias dstart='docker_start'
docker_stop() {
    local c_id=`dgrepr $1`
    docker container stop $c_id
}
alias dstop='docker_stop'
docker_restart() {
    local c_id=`dgrepr $1`
    docker container restart $c_id
}
alias drestart='docker_restart'
docker_remove() {
    local c_id=`dgrep $1`
    if [[ $(dcl) == *"${c_id}"* ]]; then
        echo "${c_id} running, stopping first..."
        docker stop $c_id > /dev/null 2>&1
    fi
    docker container rm $c_id
}
alias drm='docker_remove'
docker_logs() {
    local c_id=`dgrepr $1`
    docker logs -f $c_id
}
alias dlogs='docker_logs'
docker_shell() {
    local c_id=`dgrepr $1`
    docker exec -it $c_id /bin/bash
}
alias dsh='docker_shell'
alias dcup='docker-compose up -d'
alias dcdown='docker-compose down'


# ============ CAPISTRANO =============
alias cpd='cap production deploy'
alias cpr='cap production rails:console'


# ============ RVM =============
alias rvml='rvm list'
alias rvmgl='rvm gemset list'
alias rvmg='rvm gemset use'
alias rvmrc="echo 'rvm --create use$1' >> .rvmrc"
alias loadrvm='. "$HOME/.rvm/scripts/rvm"'


# ============ RAILS =============
alias rake='noglob rake' #fix for rake tasks (but not really)
fixedrake() { bundle exec rake "$1" }
alias berake=fixedrake
alias berspec='bundle exec rspec'
alias ber='bundle exec rspec'


# ============ GOOGLE CLOUD =============
alias gc='gcloud'
alias gcssh='gcloud compute ssh'


# ============ WEBSITES =============
alias sl='open http://www.seamless.com/food-delivery/vendors.m'
alias slmmg='open http://www.seamless.com/food-delivery/muscle-maker-grill-chelsea-new-york-city.29481.r'
alias sltoast='open http://www.seamless.com/food-delivery/toasties-delicatessen-new-york-city.1898.r'
alias slzumi='open http://www.seamless.com/food-delivery/izumi-sushi-new-york-city.1688.r'
alias weather='open http://www.weather.com/weather/hourbyhour/l/10003:4:US'
alias ff='open https://football.fantasysports.yahoo.com/f1/119334'
alias fandango='open https://www.fandango.com/10003_movietimes?mode=general&q=10003'


# ============ BUZZER / PUSHFOROPEN =============
BUZZER_URL='https://buzzer.domo.media'
hit_buzzer() { curl "$BUZZER_URL/open/$1" }
alias buzz='hit_buzzer'


# ============ VIM (cleanup) =============
alias rmswp='find . -name "*.sw[g-p]" | xargs rm'
rmpython() {
    find . -name "*.pyc*" | xargs rm
    find . -name "*.pyo*" | xargs rm
}
alias rmpy=rmpython


# ===== KUBE ========
alias k='kubectl'

kube_set_namespace() {
    kubectl config set-context --current --namespace=$1
}
alias kn='kube_set_namespace'
alias kcn='kubectl config view --minify | grep namespace:'

alias kc='kubectl config use-context'
alias kcc='kubectl config current-context'

kube_get_fzf() {
    local k_id=$(kubectl get $2 | tail +2 | fzf -0 | awk '{print $1}')
    if [ -n "$k_id" ]; then
        kubectl $1 $2/$k_id
    fi
}
alias kgp='kube_get_fzf get pods'
alias kdp='kube_get_fzf describe pods'
alias klp='kube_get_fzf logs pods'

alias kgj='kube_get_fzf get jobs'
alias kdj='kube_get_fzf describe jobs'
alias klj='kube_get_fzf logs jobs'

alias kgd='kube_get_fzf get deployments'
alias kdd='kube_get_fzf describe deployments'
alias kld='kube_get_fzf logs deployments'

alias kgs='kube_get_fzf get services'
alias kds='kube_get_fzf describe services'
alias kls='kube_get_fzf logs services'

alias kgn='kube_get_fzf get nodes'
alias kdn='kube_get_fzf describe nodes'

alias kdel='kubectl delete'
alias kdelp='kubectl delete pod'
alias kdelj='kubectl delete job'
alias kdeld='kubectl delete deployment'

alias kprox='kubectl proxy &'
alias killkprox="pkill -f 'kubectl proxy'"

kube_connect_fzf() {
    local k_id=$(kubectl get pods --field-selector=status.phase=Running | tail +2 | fzf -0 | awk '{print $1}')
    if [ -n "$k_id" ]; then
        kubectl exec -it $k_id -- bash
    fi
}
alias kconn="kube_connect_fzf"

alias mk='minikube'
alias hvals='helm get values'


# ======= ARGO ========
alias a='argo'

argo_list_fzf() {
    local wf_id=$(argo list | tail +2 | fzf -0 | awk '{print $1}')
    if [ -n "$wf_id" ]; then
        argo $1 $wf_id
    fi
}
alias aget='argo_list_fzf get'
alias alogs='argo_list_fzf logs'


# ===== AWS / Localstack ========
alias laws="aws --profile localstack --endpoint-url=http://localhost:4566"

function aws-sso() {
  if [ $# -eq 0 ]; then
    echo "Existing profiles (you can always add a new one):"
    grep source_profile ~/.okta/profiles | awk '{ print " ", $3 }'
    return
  fi
  aws-assume-role -p $1
  export AWS_PROFILE=$1
}


# ===== JAVA ========
export JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)
export JAVA_11_HOME=$(/usr/libexec/java_home -v11)
export JAVA_13_HOME=$(/usr/libexec/java_home -v13)

alias java8='export JAVA_HOME=$JAVA_8_HOME'
alias java11='export JAVA_HOME=$JAVA_11_HOME'
alias java13='export JAVA_HOME=$JAVA_13_HOME'

# default to Java 11
java11
