# ============ Aliases =============
DEFAULT_PYTHON_VERSION='3.9.1'

# ============ FILES =============
# alias notes='cd $NOT_PUBLIC/notes && vim .'
# alias notes='cd /Volumes/GoogleDrive/My\ Drive/notes && vim .'
alias notes='cd $HOME/Documents/notes && vim .'
alias dev='cd $HOME/dev'
alias crypto='cd $NOT_PUBLIC/crypto'
alias cryp='cd $NOT_PUBLIC/crypto'
alias dotz='vim $DOTS/zshrc'
alias dotv='vim $DOTS/vimrc'
alias dotal='vim $SOURCES/aliases'
alias dotdoc='vim $SOURCES/docurated_aliases'
alias cdot='cd ~/dotfiles'
alias ndot='cdot && nvim'
alias cdown='cd ~/Downloads'
alias soz='source ~/.zshrc'
alias cpwd="pwd | tr -d '\n' | pbcopy"

launch_todo() {
    # filepath=$NOT_PUBLIC/notes/todo/personal.taskpaper
    # filepath="/Volumes/GoogleDrive/My Drive/notes/todo.taskpaper"
    filepath="$HOME/Documents/notes/todo.taskpaper"
    if [ -n "$TMUX" ]; then
        tmux -u new-window -a -n todo "source $HOME/.zshrc && vim $filepath"
    else
        vim $filepath
    fi
}
alias todo='launch_todo'

creds() {
    grep -i $1 --exclude=ssh_known_hosts $NOT_PUBLIC/links/*
}

make_note() {
    if [ $# -eq 1 ]
    then
        mvim $NOT_PUBLIC/notes/$1.md
    else
        mvim $NOT_PUBLIC/notes/$2/$1.md
    fi
}
alias note='make_note'
alias study_time='cd $NOT_PUBLIC/study/leetcode && ../study_time.sh'
wifi_restart() {
    networksetup -setairportpower airport off
    networksetup -setairportpower airport on
}


# ============ UNIX =============
if which exa >/dev/null 2>&1; then
    alias ls='exa'
    exa_tree() {
        if [ $# -eq 0 ]; then
            exa --tree
        else
            exa --tree --level=$1
        fi
    }
    alias ltree='exa_tree'
    exa_tree_long() {
        if [ $# -eq 0 ]; then
            exa -l --tree
        else
            exa -l --tree --level=$1
        fi
    }
    alias lltree='exa_tree_long'
fi
# these are overwritten by ~/.oh-my-zsh/lib/directories.zsh
# alias l='ls -l'
# alias ll='ls -la'
alias c='clear'
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -iv'
alias rmdir='rmdir -v'
alias ln='ln -v'
alias grep='grep --colour=auto'
alias egrep='egrep --colour=auto'
#alias rcp='rsync -v --progress'
#alias rmv='rsync -v --progress --remove-source-files'
alias which='which -a'
alias rg_better='rg --follow --smart-case'
grep_filetype() {
    if [ $# -eq 2 ]; then
        rg_better -g "*.$2" $1
    else
        rg_better $1
    fi
}
alias g='grep_filetype'
grep_and_replace() {
    grep -rl "$1" . | xargs sed -i '' -e "s/$1/$2/g"
}


alias py='python'
alias pv='pyenv virtualenv'
pv_local() {
    pv $DEFAULT_PYTHON_VERSION $1
    pyenv local $DEFAULT_PYTHON_VERSION/envs/$1
}
alias pvlocal='pv_local'


alias hist="rg -N '' $NOT_PUBLIC/history/*"
hist_g() {
    rg -e "^[^#]" -N --no-filename $NOT_PUBLIC/history/* |
    LC_ALL='C' sed -E 's/^\: [0-9]+\:[0-9]\;//g' | grep "$1"
}
alias h='hist_g'
launch_vim() {
    if [ -n "$TMUX" ]; then
        curr_folder=${PWD##*/}
        tmux -u new-window -a -n $curr_folder "export TERM='xterm-256color' && vim $1"
    else
        vim $1
    fi
}
alias v='launch_vim'
alias m='mvim'
launch_nvim() {
    if [ -n "$TMUX" ]; then
        curr_folder=${PWD##*/}
        tmux -u new-window -a -n $curr_folder "nvim $1"
    else
        nvim $1
    fi
}
alias n='launch_nvim'

psgrep() { ps aux | grep -v grep | fzf -0 -q $1 }
alias psg=psgrep

psgrep_kill() { 
    ps_id=`psgrep $1 | awk '{print $2}'`
    echo "killing process ${ps_id}"
    kill $ps_id
}
alias psgkill='psgrep_kill'
psgrep_kill9() { 
    ps_id=`psgrep $1 | awk '{print $2}'`
    echo "killing process ${ps_id}"
    kill -9 $ps_id
}
alias psgkill9='psgrep_kill9'

## pass options to free ##
alias meminfo='free -m -l -t'
 
## get top process eating memory
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
 
## get top process eating cpu ##
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
 
## Get server cpu info ##
alias cpuinfo='lscpu'
alias top_cpu='top -F -R -o cpu'

wttr_weather() { curl "wttr.in/${1:-}" }
alias ww='wttr_weather'


# ============ SSH =============
alias ssh_start_agent='eval "$(ssh-agent -s)"'


# ============ VENV =============
venv_make() {
    venv_dir=$HOME/venv
    if [ ! -d $venv_dir ]; then
        echo "venv directory ($venv_dir) does not exist, exiting."
        return 0
    fi
    python -m venv $venv_dir/$1
    source $venv_dir/$1/bin/activate
}
alias vmake='venv_make'
alias vnew='venv_make'
venv_source() {
    venv_dir=$HOME/venv
    if [ ! -d $venv_dir ]; then
        echo "venv directory ($venv_dir) does not exist, exiting."
        return 0
    fi
    if which deactivate >/dev/null 2>&1; then
        deactivate
    fi

    if [ "$#" -ne 1 ]; then
        project=`ls $venv_dir | fzf -0 | awk '{print $1}'`
    else
        project=`ls $venv_dir | fzf -0 -q $1 | awk '{print $1}'`
    fi
    source $venv_dir/$project/bin/activate
}
alias vsource='venv_source'
alias vls='l $HOME/venv'
venv_remove() {
    venv_dir=$HOME/venv
    if [ ! -d $venv_dir ]; then
        echo "venv directory ($venv_dir) does not exist, exiting."
        return 0
    fi
    if which deactivate >/dev/null 2>&1; then
        deactivate
    fi

    if [ "$#" -ne 1 ]; then
        project=`ls $venv_dir | fzf -0 | awk '{print $1}'`
    else
        project=`ls $venv_dir | fzf -0 -q $1 | awk '{print $1}'`
    fi
    rm -rf $venv_dir/$project
}
alias vrm='venv_remove'


# ============ LaTeX =============
# remove unnecessary latex files in this dir
alias rmltx='latexmk -c'


# ============ GIT =============
# alias g='git'
# alias gs='git status'
# alias ga='git add'

alias gb='git branch -av'
alias gbl='git branch'

alias gcam='git commit -a -m'
alias gci='git commit'
git_checkout() {
    if [ "$#" -ne 1 ]; then
        branch=$(git branch -av | fzf -0 | awk '{print $1}' | sed -e "s/^remotes\/origin\///")
        if [[ "$branch" == "" ]]; then
            return 1
        fi
        git checkout "$branch"
    else
        git checkout "$@"
    fi
}
alias gco='git_checkout'
alias gcom='git checkout master'

git_merge() {
    if [ "$GIT_BRANCH" != "master" ]; then
        echo "Not on master, exiting."
        return 0
    fi
    branch=$(git branch | fzf -0 | awk '{print $1}')
    git pull
    git merge --no-ff "$branch"
    git push
}
alias gmerge='git_merge'
alias gmm='git merge master'

alias gpull='git pull'
alias gpush='git push'
alias gpp='git pull && git push'
git_push_origin() {
    git push origin ${1:-${GIT_BRANCH}}
}
alias gpo='git_push_origin'
alias gitrm='git reset --hard origin/master'
gcamp() {
    gcam $1
    gpp
}
# cd to git root dir
function cdg() {
    topdir=$(git rev-parse --show-toplevel)
    if [[ $? -ne 0 ]]; then
        return 1
    fi
    cd "${topdir}/${1}"
}
git_clean_branches() {
    git checkout master
    git pull
    git branch --merged | egrep -v "(^\*|master)" | xargs git branch -d
}
git_undo_last_commit() {
    git reset --soft HEAD~1
}
alias git_reset_to_master='git reset --hard origin/master'



# ============ GITHUB =============
# alias giss='open https://github.com/issues/assigned'
alias grev='open https://github.com/pulls/review-requested'
# git_new_pr() {
#     repo=$(basename `git rev-parse --show-toplevel`)
#     open https://github.com/NYDIG/${repo}/pull/new/${GIT_BRANCH}
# }
# alias gnpr="git_new_pr"
# git_new_issue() {
#     repo=$(basename `git rev-parse --show-toplevel`)
#     open https://github.com/NYDIG/${repo}/issues/new
# }
# alias gni="git_new_issue"


# ============ TMUX =============
alias tl='tmux -u ls'
tmux_attach() { tmux -u a -t ${1:-base} }
alias ta='tmux_attach'
tmux_new() { tmux -u new -A -s ${1:-base} }
alias tn='tmux_new'
tmux_wrapper() {
    if [ $# -eq 0 ]; then
        if [ -n "$TMUX" ]; then
            echo "SMOOTH BRO"
        else
            tn
        fi
    else
        tmux -u "$@"
    fi
}
alias t='tmux_wrapper'


# ============ BREW =============
alias bserv='brew services list'
alias bstart='brew services start'
alias bstop='brew services stop'


# ============ DOCKER =============
alias d='docker'
alias dcl='docker container ls'
alias dcla='docker container ls -a'
alias dps='docker ps --format "table {{.ID}}  {{.Image}}\t{{.Command}}\t{{.Status}}\t{{.Size}}\t{{.Names}}"'
docker_grep_all() {
    info=`dcla | sed 1d | awk '{print $1, "\t", $2, "\t", $NF}'`
    if [ "$#" -ne 1 ]; then
        echo $info | fzf -0 | awk '{print $1}'
    else
        echo $info | fzf -0 -q $1 | awk '{print $1}'
    fi
}
alias dgrep="docker_grep_all"
docker_grep_running() {
    info=`dcl | sed 1d | awk '{print $1, "\t", $2, "\t", $NF}'`
    if [ "$#" -ne 1 ]; then
        echo $info | fzf -0 | awk '{print $1}'
    else
        echo $info | fzf -0 -q $1 | awk '{print $1}'
    fi
}
alias dgrepr='docker_grep_running'
docker_start() {
    c_id=`dgrep $1`
    docker container start $c_id
}
alias dstart='docker_start'
docker_stop() {
    c_id=`dgrepr $1`
    docker container stop $c_id
}
alias dstop='docker_stop'
docker_restart() {
    c_id=`dgrepr $1`
    docker container restart $c_id
}
alias drestart='docker_restart'
docker_remove() {
    c_id=`dgrep $1`
    if [[ $(dcl) == *"${c_id}"* ]]; then
        echo "${c_id} running, stopping first..."
        docker stop $c_id > /dev/null 2>&1
    fi
    docker container rm $c_id
}
alias drm='docker_remove'
docker_logs() {
    c_id=`dgrepr $1`
    docker logs -f $c_id
}
alias dlogs='docker_logs'
docker_shell() {
    c_id=`dgrepr $1`
    docker exec -it $c_id /bin/bash
}
alias dsh='docker_shell'
alias dcup='docker-compose up -d'
alias dcdown='docker-compose down'


# ============ CAPISTRANO =============
alias cpd='cap production deploy'
alias cpr='cap production rails:console'


# ============ RVM =============
alias rvml='rvm list'
alias rvmgl='rvm gemset list'
alias rvmg='rvm gemset use'
alias rvmrc="echo 'rvm --create use$1' >> .rvmrc"
alias loadrvm='. "$HOME/.rvm/scripts/rvm"'


# ============ RAILS =============
alias rake='noglob rake' #fix for rake tasks (but not really)
fixedrake() { bundle exec rake "$1" }
alias berake=fixedrake
alias berspec='bundle exec rspec'
alias ber='bundle exec rspec'


# ============ GOOGLE CLOUD =============
alias gc='gcloud'
alias gcssh='gcloud compute ssh'


# ============ WEBSITES =============
alias sl='open http://www.seamless.com/food-delivery/vendors.m'
alias slmmg='open http://www.seamless.com/food-delivery/muscle-maker-grill-chelsea-new-york-city.29481.r'
alias sltoast='open http://www.seamless.com/food-delivery/toasties-delicatessen-new-york-city.1898.r'
alias slzumi='open http://www.seamless.com/food-delivery/izumi-sushi-new-york-city.1688.r'
alias weather='open http://www.weather.com/weather/hourbyhour/l/10003:4:US'
alias ff='open https://football.fantasysports.yahoo.com/f1/119334'
alias fandango='open https://www.fandango.com/10003_movietimes?mode=general&q=10003'


# ============ BUZZER / PUSHFOROPEN =============
BUZZER_URL='https://buzzer.domo.media'
hit_buzzer() { curl "$BUZZER_URL/open/$1" }
alias buzz='hit_buzzer'


# ============ VIM (cleanup) =============
alias rmswp='find . -name "*.sw[g-p]" | xargs rm'
rmpython() {
    find . -name "*.pyc*" | xargs rm
    find . -name "*.pyo*" | xargs rm
}
alias rmpy=rmpython


# ===== KUBE ========
alias kc='kubectl config use-context'
alias kcont='kubectl config use-context'
alias kcc='kubectl config current-context'

kube_pods_grep() {
    kubectl get pods | grep "$1"
}
alias kpods='kube_pods_grep'

kube_jobs_grep() {
    kubectl get jobs | grep "$1"
}
alias kjobs='kube_jobs_grep'

kube_deployments_grep() {
    kubectl get deployments | grep "$1"
}
alias kdeps='kube_deployments_grep'

alias kdes='kubectl describe'
alias kdesp='kubectl describe pod'
alias kdesj='kubectl describe job'
alias kdesd='kubectl describe deployment'

alias kdel='kubectl delete'
alias kdelp='kubectl delete pod'
alias kdelj='kubectl delete job'
alias kdeld='kubectl delete deployment'

alias kprox='kubectl proxy &'
alias killkprox="pkill -f 'kubectl proxy'"

alias hvals='helm get values'

kube_pod_grep() {
    kubectl get pods | grep "$1" | awk '{print $1}'
}
alias kpodg="kube_pod_grep"

kube_connect() {
    kubectl exec -it $1 bash
}
alias kube_conn="kube_connect"

kube_grep_connect() {
    kube_conn `kpodg $1`
}
alias ck="kube_connect"
alias ckg="kube_grep_connect"


# ===== OTHER ========
alias rt_update='$HOME/dev/self/certified_fresh/run.sh'


